#include <openssl/ssl.h>

#include <openssl/err.h>

#include <string.h>

#include <stdio.h>

#include <regex.h>

#include <sys/time.h>

#include <mpi/mpi.h>

int success = 0;

void handleOpenSSLErrors(void) {
  ERR_print_errors_fp(stderr);
  abort();
}

void initAES(const unsigned char * pass, unsigned char * salt, unsigned char * key, unsigned char * iv) {
  //initialisatio of key and iv with 0
  bzero(key, sizeof(key));
  bzero(iv, sizeof(iv));

  EVP_BytesToKey(EVP_aes_128_cbc(), EVP_sha1(), salt, pass, strlen(pass), 1, key, iv);
}

unsigned char * decrypt(unsigned char * ciphertext, int ciphertext_len, unsigned char * key, unsigned char * iv, int * success) {

  EVP_CIPHER_CTX * ctx;
  unsigned char * plaintexts;
  int len;
  int plaintext_len;

  //unsigned char* plaintext = new unsigned char[ciphertext_len];
  unsigned char * plaintext = malloc(ciphertext_len);
  bzero(plaintext, ciphertext_len);

  /* Create and initialise the context */

  if (!(ctx = EVP_CIPHER_CTX_new())) handleOpenSSLErrors();

  if (1 != EVP_DecryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, key, iv))
    handleOpenSSLErrors();

  EVP_CIPHER_CTX_set_key_length(ctx, EVP_MAX_KEY_LENGTH);

  /* Provide the message to be decrypted, and obtain the plaintext output.
   * EVP_DecryptUpdate can be called multiple times if necessary
   */
  if (1 != EVP_DecryptUpdate(ctx, plaintext, & len, ciphertext, ciphertext_len))
    handleOpenSSLErrors();

  plaintext_len = len;

  /* Finalise the decryption. Further plaintext bytes may be written at
   * this stage.
   */
  // return 1 if decryption successful, otherwise 0
  if (1 == EVP_DecryptFinal_ex(ctx, plaintext + len, & len))
    //handleOpenSSLErrors()
    //printf("Here9!\n");
    *
    success = 1;
  plaintext_len += len;

  /* Add the null terminator */
  plaintext[plaintext_len] = 0;

  /* Clean up */
  EVP_CIPHER_CTX_free(ctx);
  //string ret = (char*)plaintext;
  //delete [] plaintext;
  return plaintext;
}

size_t calcDecodeLength(char * b64input) {
  size_t len = strlen(b64input), padding = 0;

  if (b64input[len - 1] == '=' && b64input[len - 2] == '=') //last two chars are =
    padding = 2;
  else if (b64input[len - 1] == '=') //last char is =
    padding = 1;
  return (len * 3) / 4 - padding;
}

void Base64Decode(char * b64message, unsigned char ** buffer, size_t * length) {

  BIO * bio, * b64;

  int decodeLen = calcDecodeLength(b64message);
  * buffer = (unsigned char * ) malloc(decodeLen + 1);
  ( * buffer)[decodeLen] = '\0';

  bio = BIO_new_mem_buf(b64message, -1);
  b64 = BIO_new(BIO_f_base64());
  bio = BIO_push(b64, bio);

  * length = BIO_read(bio, * buffer, strlen(b64message));
  BIO_free_all(bio);
}

int checkPlaintext(char * plaintext, char * result) {

  int length = 10; // we just check the first then characters
  return strncmp(plaintext, result, length);

}


int main (int argc, char **argv){
    //Initialise OpenMPI specific variables, used in message passing and vector assignment.
    int myrank, rbuf, sbuf, count = 1, flag, err, inc;
    MPI_Status status;
    MPI_Request req;

    //Initialise time keeping variables, clock_t only returned CPU time when using OpenMPI.
    struct timeval start1, end1;
    gettimeofday(&start1, NULL);

  // password 29Apr
  	char * ciphertext_base64 = (char *)"U2FsdGVkX1/Y+mHv2oZdo5MLKEQWCATfc31jSGWXZ6D3gWuLdZYVUrRnGNecV+EdFsMYSWhEh1nsP9tMwpQaPeWMP3MZ6G0HCLVw+fjRjYY1Fi+lpuGKd/jmZh0Loylw0gVo2SUxNigSvjnn3xAGHg==\n";

  // password Zest
  // 	char* ciphertext_base64 = (char*) "U2FsdGVkX18IzeFxDZrMxL56zmCxpJTpMMCShpV02j9QRvgeAuvSc6V406zzfuwETgIxJXaqvFHMVuFXfR+X6ZDFm2SClHRuI9C1yL+JRRRAUZS22BrE8y0XS0Zwhk5JZS3IBRuNSRNgELQ+Fimmsw==\n";   

  	char * plaintext = "This is the top seret message in parallel computing! Please keep it in a safe place.";//plain text

   //   char dict[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";//forward
 	char dict[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"; //backward

    //Property variables.
    int decryptedtext_len, ciphertext_len, dict_len;
    size_t cipher_len;

    //Variable for unsalted ciphertext, and the extracted salt.
    unsigned char* ciphertext;
    unsigned char salt[8];

    //Load libcrypto error strings.
    ERR_load_crypto_strings();

    //Decode from base64 "main.c -> b64.c -> main.c"
    Base64Decode(ciphertext_base64, &ciphertext, &cipher_len);

    //Initialise Key and IV.
    unsigned char key[16];
    unsigned char iv[16];

    //Define password length.
    unsigned char plainpassword[] = "00000";// uncomment to run the cipher1 which gives the password 29Apr and comment the plainpassword[] ="0000"
   // unsigned char plainpassword[] = "0000"; // uncomment to run the cipher1 which gives the password zest and comment the plainpassword[] ="00000"
    unsigned char* password = &plainpassword[0];
    int password_length = 3;

    //Remove the salt from the decoded ciphertext.
    if (strncmp((const char*)ciphertext,"Salted__",8) == 0) {
        memcpy(salt,&ciphertext[8],8);
        ciphertext += 16;
        cipher_len -= 16;
    }

    //define dictionary length for loops.
    dict_len = strlen(dict);

    //Initialise OpenMPI process, get assigned rank in default communication channel.
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
    MPI_Comm_size(MPI_COMM_WORLD, &inc);

    //Post recieves, fufilled by process that finds target.
    MPI_Irecv(&rbuf, count, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &req);

    //Four for loops, determine value of password characters position, 1,2,3,4
    for(int i = myrank; i < dict_len; i = i + inc){
      for(int j=0; j<dict_len; j++){
        for(int k=0; k<dict_len; k++){
          for(int l=0; l<dict_len; l++){
            for(int m=0; m<dict_len; m++){ //comment the for loop to run the cipher 1 and uncomment while running the cipher 2

                    //check if another process has broadcasted that it has found the target.
                    MPI_Test(&req, &flag, &status);
                    if(flag == 1){
                        printf("Another process has found the key, exiting...\n");
                        MPI_Finalize();
                    }

                    //Password character at postion 0 determined by rank.
                    *password = dict[i];
                    *(password+1) = dict[j];
                    *(password+2) = dict[k];
                    *(password+3) = dict[l];
                    *(password+4) = dict[m];// comment this when running the chipher 1 and uncomment while running chipher2

		    printf("%s\n", password);
                    //Initialise and attempt AES decryption.
                    initAES(password, salt, key, iv);
                    unsigned char* result = decrypt(ciphertext, cipher_len, key, iv, &success);

                    //test success value returned by the decrypt AES function.
                    if (success == 1){
                        //Compare decryption attempt and target plaintext (sometimes success value can return false positives).
                        if(checkPlaintext(plaintext, result)==0){

                            MPI_Bcast(&sbuf, count, MPI_INT, myrank, MPI_COMM_WORLD);

                            //print results.
                            printf("%s\n%s", result, password);

                            //calculate time taken.
                            gettimeofday(&end1, NULL);
                            double timetaken = end1.tv_sec + end1.tv_usec / 1e6 - start1.tv_sec  - start1.tv_usec / 1e6;
                            printf("\nTime spent: %f\n", timetaken);

                            /*
                                MPI_Abort kills all processes related to the one that calls it
                                Its brutish and can cause data loss, but the process calling it in this case has already found the target.
                            */
                            MPI_Abort(MPI_COMM_WORLD, err);
                            exit(0);
                        }
                    }
                    //free result memeory (program previously seg faulted due to compounding memory usage).
                    free(result);

                    //Seg fault catcher, if the target is towards the end, i may increment beyond its bounds.
                    if((i + inc) > dict_len){
                      MPI_Barrier(MPI_COMM_WORLD);
                    }
                }
            }
        }
    }
  }


    // Clean up
    EVP_cleanup();
    ERR_free_strings();
    MPI_Finalize();
}
